#include <iostream>
#include <fstream> // acesso a biblioteca com as funções que permitem o uso dos arquivos
#include <locale.h> // permitir a acentuação
#include <cstring>
#include <cstdlib>

using namespace std;

struct Img{
    int linhas;
    int colunas;
    int M[512][512][3];
};

void abre_img(char nome[], Img& img){
    fstream arq;

    int  pixels, k=0;
    char tipo[3]; // declara uma variavel char para armazenar o tipo da imagem

    arq.open(nome);

    if(arq.is_open()){
        //cout << "Está aberto!\n";
        arq.getline(tipo, 3);
        if(strcmp("P3",tipo)!=0){
            cout<<"ERRO\n";
            exit(0);
        }
        arq >> img.colunas;
        arq >> img.linhas;
        arq>> pixels;

        int i, j;

        for(i=0; i<img.linhas; i++){
            for(j=0; j<img.colunas; j++){
               for(k=0; k<3; k++){
                    arq >> img.M[i][j][k];
               }
            }
        }
        arq.close();
    }

    else{
        cout << "Não está aberto!\n";
        exit(0);
    }
}
void salva_img(char nome[],Img img){
    ofstream myfile;

    myfile.open(nome);

    if(myfile.is_open()){
        myfile << "P3"<<endl;

        myfile << img.colunas << " " << img.linhas << "\n" << 255 << endl;

        int i, j,k;

        for(i=0; i<img.linhas; i++){
            for(j=0; j<img.colunas; j++){
               for(k=0; k<3; k++){
                    myfile << img.M[i][j][k] << " ";
               }
            }

            myfile << endl;
        }
        myfile.close();
    }
}

/*/void corta_rgb(Img img_in, Img& img_out, int li, int ci, int lf, int cf){

    char nome[]= "lake.ppm";

    int i, j, k;

    for(i=li; i<=lf; i++){
        for(j=ci; j<=cf; j++){
            for(k=0; k<3; k++){void diminui_tamanho(Img img_in, Img& img_out){
    int i=0, j=0, k, linhas, colunas;

    for(linhas=0; linhas<img_in.linhas; linhas++){
        if(i%2!=0){
            i++;
        }
        for(colunas=0; colunas<img_in.colunas; colunas++){
            if(j%2!=0){
                j++;
            }
            for(k=0; k<3; k++){
                img_out.M[linhas][colunas][k] = img_in.M[i][j][k];
            }
            j++;
        }
        i++;
    }

    img_out.linhas= img_in.linhas/2;
    img_out.colunas= img_in.colunas/2;

    salva_img("Nova_imagem_reduzida123.ppm", img_out);
}
                img_out.M[i][j][k] = img_in.M[i][j][k];
            }
        }
    }

    img_out.linhas= lf-li;
    img_out.colunas= cf-ci;

    salva_img("Nova_imagem.ppm", img_out);
}
/*/

/*/
void rotaciona(Img img_in, Img& img_out){
    int i, j, k;

    img_out.linhas= img_in.colunas;
    img_out.colunas = img_in.linhas;

    for(i=0; i<=img_in.linhas; i++){
        for(j=0; j<=img_in.colunas; j++){
            for(k=0; k<3; k++){
                img_out.M[i][j][k] = img_in.M[img_in.colunas-j][i][k];
            }
        }
    }

    salva_img("Nova_imagem_rotacionada.ppm", img_out);
}
/*/

/*/void diminui_tamanho(Img img_in, Img& img_out){
    int i=0, j=0, k, linhas=0, colunas=0;

    img_out.linhas= img_in.linhas/2;
    img_out.colunas= img_in.colunas/2;

    for(i=0; linhas<=img_out.linhas; linhas++){
        if(i%2!=0){
            i++;
        }
        for(colunas=0; colunas<=img_in.colunas; colunas++){
            if(j%2!=0){
                j++;
            }
            for(k=0; k<3; k++){
                img_out.M[linhas][colunas][k] = img_in.M[i][j][k];
            }
            j++;
        }
        j=0;
        i++;
    }

    salva_img("oi.ppm", img_out);
}
/*/
void aumenta_tamanho(Img img_in, Img& img_out){
    int i1,j1,i2,j2,k;
    img_out.colunas=2*img_in.colunas-1;
    img_out.linhas=2*img_in.linhas-1;

    for(i1=0;i1<img_in.linhas;i1++){
        for(j1=0;j1<img_in.colunas;j1++){
            for(k=0;k<3;k++){
                img_out.M[2*i1][2*j1][k]=img_in.M[i1][j1][k];
            }
        }
    }
     //primeira etapa
    for(i2=1;i2<img_out.linhas;i2+=2){
        for(k=0;k<3;k++){
            img_out.M[i2][0][k]=(img_out.M[i2-1][0][k]+img_out.M[i2+1][0][k])/2;
            img_out.M[i2][img_out.colunas-1][k]=(img_out.M[i2-1][img_out.colunas-1][k]+img_out.M[i2+1][img_out.colunas-1][k])/2;
        }
    }
    for(j2=1;j2<img_out.colunas;j2+=2){
        for(k=0;k<3;k++){
            img_out.M[0][j2][k]=(img_out.M[0][j2-1][k]+img_out.M[0][j2+1][k])/2;
            img_out.M[img_out.linhas-1][j2][k]=(img_out.M[img_out.linhas-1][j2-1][k]+img_out.M[img_out.linhas-1][j2-1][k])/2;
        }
    }
    //segunda etapa
    for(i2=1;i2<img_out.linhas;i2+=2){
        for(j2=1;j2<img_out.colunas;j2+=2){
            for(k=0;k<3;k++){
                img_out.M[i2][j2][k]=img_out.M[i2-1][j2-1][k]+img_out.M[i2-1][j2+1][k]+img_out.M[i2+1][j2-1][k]+img_out.M[i2+1][j2+1][k];
                img_out.M[i2][j2][k]=img_out.M[i2][j2][k]/4;
            }
        }
    }
    //terceira etapa
    for(i2=1;i2<img_out.linhas;i2+=2){
        for(j2=1;j2<img_out.colunas;j2+=2){
            if((i2%2==0 && j2%2!=0)|| (i2%2!=0 && j2%2==0)){
                for(k=0;k<3;k++){
                    img_out.M[i2][j2][k]=img_out.M[i2-1][j2][k]+img_out.M[i2+1][j2][k]+img_out.M[i2][j2-1][k]+img_out.M[i2][j2+1][k];
                    img_out.M[i2][j2][k]=img_out.M[i2][j2][k]/4;
                }
            }
        }
    }
    salva_img("imagem_aumentada.ppm", img_out);
}


/*/
Img mascara (Img img_in){
    int i, j;
    Img mascara;

    mascara.linhas = img_in.linhas;
    mascara.colunas = img_in.colunas;

    for (i=0; i<mascara.linhas/2; i++){
        for (j=0; j<mascara.colunas; j++){
            mascara.M[i][j][0] = 255;
            mascara.M[i][j][1] = 255;
            mascara.M[i][j][2] = 255;
        }
    }

    for (i=mascara.linhas/2; i<mascara.linhas; i++){
        for (j=0; j<mascara.colunas; j++){
            mascara.M[i][j][0] = 0;
            mascara.M[i][j][1] = 0;
            mascara.M[i][j][2] = 0;
        }
    }

    return mascara;
}
/*/

/*/
void binariza(Img img_in, Img& img_out, int limiar){
    int i, j;

    img_out.linhas = img_in.linhas;
    img_out.colunas = img_in.colunas;

    for(i=0; i< img_in.linhas; i++){
        for(j=0; j < img_in.colunas; j++){
            int media = (img_in.M[i][j][0] + img_in.M[i][j][1] + img_in.M[i][j][2])/3;
            if (media < limiar) {
                img_out.M[i][j][0] = 0;
                img_out.M[i][j][1] = 0;
                img_out.M[i][j][2] = 0;
            }
            if (media >= limiar) {
                img_out.M[i][j][0] = 255;
                img_out.M[i][j][1] = 255;
                img_out.M[i][j][2] = 255;
            }
        }
    }

    salva_img("pretoebranco.ppm", img_out);
}

void binariza_com_mascara(Img img_in, Img& img_out, int limiar){
    int i, j;

    img_out.linhas = img_in.linhas;
    img_out.colunas = img_in.colunas;

    for(i=0; i< img_in.linhas; i++){
        for(j=0; j < img_in.colunas; j++){
            if (mascara(img_in).M[i][j][0]==255 && mascara(img_in).M[i][j][1]==255 && mascara(img_in).M[i][j][2]==255){
                int media = (img_in.M[i][j][0] + img_in.M[i][j][1] + img_in.M[i][j][2])/3;
                if (media < limiar) {
                    img_out.M[i][j][0] = 0;
                    img_out.M[i][j][1] = 0;
                    img_out.M[i][j][2] = 0;
                }
                if (media >= limiar) {
                    img_out.M[i][j][0] = 255;
                    img_out.M[i][j][1] = 255;
                    img_out.M[i][j][2] = 255;
                }
            }
            else {
                img_out.M[i][j][0] = img_in.M[i][j][0];
                img_out.M[i][j][1] = img_in.M[i][j][1];
                img_out.M[i][j][2] = img_in.M[i][j][2];
            }
        }
    }

    salva_img("pretoebranco.ppm", img_out);
}

void cinza(Img img_in, Img& img_out){
    int i, j;

    img_out.linhas = img_in.linhas;
    img_out.colunas = img_in.colunas;

    for(i=0; i< img_in.linhas; i++){
        for(j=0; j < img_in.colunas; j++){
            int media = (img_in.M[i][j][0] + img_in.M[i][j][1] + img_in.M[i][j][2])/3;
                img_out.M[i][j][0] = media;
                img_out.M[i][j][1] = media;
                img_out.M[i][j][2] = media;
        }
    }

    salva_img("cinza.ppm", img_out);
}
/*/

int main()
{
    setlocale(LC_ALL, "Portuguese"); // permite a utilização de acentos provenientes da lingua portuguesa
    Img img, img_out;

    char nome[]="lena.ppm";

    //cout << "Informe o nome do arquivo que vc deseja abrir: " << endl;

    abre_img(nome, img);

    return 0;
}
